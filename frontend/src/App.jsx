import React, { useEffect, useState } from "react";
import * as pdfjsLib from "pdfjs-dist/legacy/build/pdf";
import workerSrc from "pdfjs-dist/legacy/build/pdf.worker?url";

import mammoth from "mammoth";
import html2canvas from "html2canvas";
import { jsPDF } from "jspdf";

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è PDF.js
pdfjsLib.GlobalWorkerOptions.workerSrc = workerSrc;

/**
 * –ß–µ–º –±–æ–ª—å—à–µ PDF_SCALE, —Ç–µ–º –≤—ã—à–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏ –±–æ–ª—å—à–µ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
 * –ï—Å–ª–∏ —Ö–æ—á–µ—à—å 1:1, —Å—Ç–∞–≤—å 1.0, –Ω–æ —Ç–æ–≥–¥–∞ –Ω–∞ HiDPI-–º–æ–Ω–∏—Ç–æ—Ä–µ PDF –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å ¬´–º—ã–ª—å–Ω—ã–º¬ª.
 * –° 2.0 PDF –±—É–¥–µ—Ç —á—ë—Ç–∫–∏–º, –∏ —ç–∫—Å–ø–æ—Ä—Ç —Å–æ–≤–ø–∞–¥—ë—Ç –ø–∏–∫—Å–µ–ª—å–Ω–æ.
 */
const PDF_SCALE = 2.0;

export default function App() {
  // –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: 'pdf' | 'docx' | null
  const [docType, setDocType] = useState(null);
  const [pdfPages, setPdfPages] = useState([]);
  const [pdfNumPages, setPdfNumPages] = useState(0);
  const [pdfCurrentPage, setPdfCurrentPage] = useState(1);
  const [docxHtml, setDocxHtml] = useState(null);
  
  const [stampsLibrary, setStampsLibrary] = useState([]);
  const [placedStamps, setPlacedStamps] = useState([]);
  const [activeStampIndex, setActiveStampIndex] = useState(null);
  
  // üëâ –ò–º—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  const [uploadedFileName, setUploadedFileName] = useState(null);
  

  // ====================== –ó–∞–≥—Ä—É–∑–∫–∞ PDF ======================
  const loadPdf = async (file) => {
    setDocType("pdf");
    setPdfPages([]);
    setPdfNumPages(0);
    setPdfCurrentPage(1);
    setDocxHtml(null);

    const arrayBuffer = await file.arrayBuffer();
    const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
    setPdfNumPages(pdf.numPages);

    // –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ —Ä–µ–Ω–¥–µ—Ä–∏–º
    const pages = [];
    for (let p = 1; p <= pdf.numPages; p++) {
      const pageData = await pdf.getPage(p);
      const viewport = pageData.getViewport({ scale: PDF_SCALE });

      const canvas = document.createElement("canvas");
      canvas.width = viewport.width;
      canvas.height = viewport.height;
      const ctx = canvas.getContext("2d");

      // –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ canvas
      await pageData.render({ canvasContext: ctx, viewport }).promise;

      pages.push({
        pageNumber: p,
        dataUrl: canvas.toDataURL("image/png"),
        width: canvas.width,
        height: canvas.height,
      });
    }
    setPdfPages(pages);
  };

  // ====================== –ó–∞–≥—Ä—É–∑–∫–∞ DOCX ======================
  const loadDocx = async (file) => {
    setDocType("docx");
    setPdfPages([]);
    setPdfNumPages(0);

    const arrayBuffer = await file.arrayBuffer();
    const result = await mammoth.convertToHtml({ arrayBuffer });
    setDocxHtml(result.value);
  };

  // ====================== –°–µ–ª–µ–∫—Ç–æ—Ä —Ñ–∞–π–ª–∞ (PDF / DOCX) ======================
  const handleFileUpload = async (e) => {
    const file = e.target.files[0];
    if (!file) return;
  
    setUploadedFileName(file.name);
  
    if (file.name.endsWith(".pdf")) {
      await loadPdf(file);
      setDocType("pdf");
    } else if (file.name.endsWith(".docx")) {
      const formData = new FormData();
      formData.append("file", file);
  
      try {
        const response = await fetch("http://localhost:8000/convert-docx", {
          method: "POST",
          body: formData,
        });
  
        if (!response.ok) {
          throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ DOCX");
        }
  
        const blob = await response.blob();
        const pdfFile = new File([blob], "converted.pdf", { type: "application/pdf" });
  
        await loadPdf(pdfFile);
        setDocType("pdf");
      } catch (error) {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.");
        console.error(error);
      }
    } else {
      alert("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF –∏ DOCX");
    }
  };
  
  

  // ====================== –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—á–∞—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ ======================
  const handleStampUpload = (e) => {
    const file = e.target.files[0];
    if (!file || !file.type.startsWith("image")) return;
    const src = URL.createObjectURL(file);

    setStampsLibrary((prev) => [
      ...prev,
      {
        id: Date.now(),
        src,
        size: 100,
        rotation: 0,
      },
    ]);
  };

  // ====================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—á–∞—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ ======================
  const updateStampInLibrary = (stampId, changes) => {
    setStampsLibrary((prev) =>
      prev.map((st) => (st.id === stampId ? { ...st, ...changes } : st))
    );
  };

  // ====================== –î–æ–±–∞–≤–∏—Ç—å –ø–µ—á–∞—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ======================
  const addStampToPage = (stampId) => {
    const libStamp = stampsLibrary.find((st) => st.id === stampId);
    if (!libStamp) return;

    const page = docType === "pdf" ? pdfCurrentPage : 1;
    setPlacedStamps((prev) => [
      ...prev,
      {
        libraryId: stampId,
        page,
        x: 50,
        y: 50,
        size: libStamp.size,
        rotation: libStamp.rotation,
      },
    ]);
  };

  // ====================== –£–¥–∞–ª–∏—Ç—å –ø–µ—á–∞—Ç—å —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ======================
  const removePlacedStamp = (index) => {
    setPlacedStamps((prev) => prev.filter((_, i) => i !== index));
  };

  // ====================== –î–≤–∏–∂–µ–Ω–∏–µ –ø–µ—á–∞—Ç–∏ –º—ã—à—å—é ======================
  const handleMouseMove = (e) => {
    if (activeStampIndex === null) return;

    // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–µ—á–∞—Ç—å
    setPlacedStamps((prev) =>
      prev.map((pst, i) => {
        if (i !== activeStampIndex) return pst;

        if (docType === "pdf") {
          const pageObj = pdfPages.find((p) => p.pageNumber === pst.page);
          if (!pageObj) return pst;

          const pageElem = document.getElementById(`pdf-page-${pst.page}`);
          if (!pageElem) return pst;

          const rect = pageElem.getBoundingClientRect();
          const newX = e.clientX - rect.left - pst.size / 2;
          const newY = e.clientY - rect.top - pst.size / 2;
          return { ...pst, x: newX, y: newY };
        } else {
          // docx
          const docxElem = document.getElementById("docx-container");
          if (!docxElem) return pst;

          const rect = docxElem.getBoundingClientRect();
          const newX = e.clientX - rect.left - pst.size / 2;
          const newY = e.clientY - rect.top - pst.size / 2;
          return { ...pst, x: newX, y: newY };
        }
      })
    );
  };

  const handleMouseUp = () => setActiveStampIndex(null);

  // ====================== –ü–∞–≥–∏–Ω–∞—Ü–∏—è PDF ======================
  const goToPage = (pageNum) => {
    if (pageNum < 1 || pageNum > pdfNumPages) return;
    setPdfCurrentPage(pageNum);
  };

  const pagesPerGroup = 10;
  const currentGroup = Math.floor((pdfCurrentPage - 1) / pagesPerGroup);
  const groupStart = currentGroup * pagesPerGroup + 1;
  const groupEnd = Math.min(groupStart + pagesPerGroup - 1, pdfNumPages);
  const pageNumbers = [];
  for (let p = groupStart; p <= groupEnd; p++) {
    pageNumbers.push(p);
  }

  // ====================== –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF ======================
  const exportToPdf = async () => {
    const doc = new jsPDF({ unit: "px" });
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    doc.deletePage(1);

    if (docType === "pdf") {
      for (let p = 1; p <= pdfNumPages; p++) {
        const pageObj = pdfPages.find((pg) => pg.pageNumber === p);
        if (!pageObj) continue;

        // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas
        const tempCanvas = document.createElement("canvas");
        tempCanvas.width = pageObj.width;
        tempCanvas.height = pageObj.height;

        const ctx = tempCanvas.getContext("2d");

        // –†–∏—Å—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const baseImg = await loadImage(pageObj.dataUrl);
        ctx.drawImage(baseImg, 0, 0);

        // –†–∏—Å—É–µ–º –ø–µ—á–∞—Ç–∏
        const pageStamps = placedStamps.filter((st) => st.page === p);
        for (const stmp of pageStamps) {
          const libStamp = stampsLibrary.find((lib) => lib.id === stmp.libraryId);
          if (!libStamp) continue;

          const stampImg = await loadImage(libStamp.src);
          ctx.save();
          ctx.translate(stmp.x + stmp.size / 2, stmp.y + stmp.size / 2);
          ctx.rotate((stmp.rotation * Math.PI) / 180);

          // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ mix-blend-mode
          ctx.globalAlpha = 0.85;
          ctx.globalCompositeOperation = "multiply";

          ctx.drawImage(stampImg, -stmp.size / 2, -stmp.size / 2, stmp.size, stmp.size);
          ctx.restore();

          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º blend mode
          ctx.globalCompositeOperation = "source-over";
        }

        const finalPageUrl = tempCanvas.toDataURL("image/png");
        doc.addPage([pageObj.width, pageObj.height]);
        doc.addImage(finalPageUrl, "PNG", 0, 0, pageObj.width, pageObj.height);
      }
    } else if (docType === "docx") {
      const docxElem = document.getElementById("docx-container");
      if (!docxElem) return;
      const shot = await html2canvas(docxElem);
      const imgData = shot.toDataURL("image/png");
      doc.addPage([shot.width, shot.height]);
      doc.addImage(imgData, "PNG", 0, 0, shot.width, shot.height);
    }

    doc.save("exported_document.pdf");
  };

  // ====================== –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (helper) ======================
  const loadImage = (src) => {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.crossOrigin = "anonymous";
      img.onload = () => resolve(img);
      img.onerror = reject;
      img.src = src;
    });
  };

  // ====================== JSX ======================
  return (
    <div
      className="flex flex-col h-screen"
      onMouseMove={handleMouseMove}
      onMouseUp={handleMouseUp}
    >
      {/* –®–∞–ø–∫–∞ */}
      <header className="bg-white px-4 py-3 border-b flex items-center justify-between">
        <h1 className="text-xl font-bold">–°–ö–ò–ù–¨ –°–ö–ê–ù</h1>
        {uploadedFileName && (
  <span className="ml-4 text-gray-600 text-sm italic truncate max-w-[40%]">
    üìÅ {uploadedFileName}
  </span>
)}

        <button
          onClick={exportToPdf}
          className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
        >
          –°–∫–∞—á–∞—Ç—å PDF
        </button>
      </header>

      <div className="flex flex-1 overflow-hidden">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
        <aside className="w-64 border-r p-3 bg-gray-50 space-y-4 overflow-auto">
{/* –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ */}
<div>
  <label className="block mb-1 font-medium"> </label>
  <div className="relative group">
    <button
      className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-3 rounded shadow text-sm text-left"
      onClick={() => document.getElementById("upload-doc-input").click()}
    >
      üìÑ –í—ã–±—Ä–∞—Ç—å PDF / DOCX
    </button>
    <input
      id="upload-doc-input"
      type="file"
      accept=".pdf,.docx"
      onChange={handleFileUpload}
      className="hidden"
    />
  </div>
</div>

{/* –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—á–∞—Ç–∏ */}
<div>
  <label className="block mb-1 font-medium"> </label>
  <div className="relative group">
    <button
      className="w-full bg-purple-600 hover:bg-purple-700 text-white py-2 px-3 rounded shadow text-sm text-left"
      onClick={() => document.getElementById("upload-stamp-input").click()}
    >
      üñãÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—á–∞—Ç—å
    </button>
    <input
      id="upload-stamp-input"
      type="file"
      accept="image/*"
      onChange={handleStampUpload}
      className="hidden"
    />
  </div>
</div>


          {/* –ö–∞—Ç–∞–ª–æ–≥ –ø–µ—á–∞—Ç–µ–π */}
          {stampsLibrary.length > 0 && (
            <div className="space-y-3 text-sm">
              <p className="font-medium">–ö–∞—Ç–∞–ª–æ–≥ –ø–µ—á–∞—Ç–µ–π:</p>
              {stampsLibrary.map((st) => (
                <div key={st.id} className="bg-white border p-2 space-y-2">
                  {/* –ü—Ä–µ–≤—å—é –ø–µ—á–∞—Ç–∏ */}
                  <div className="flex justify-center">
                    <img
                      src={st.src}
                      style={{
                        width: st.size,
                        height: st.size,
                        transform: `rotate(${st.rotation}deg)`,
                      }}
                      alt="stamp"
                    />
                  </div>

                  <div>
                    <label className="block text-xs text-gray-700">
                      –†–∞–∑–º–µ—Ä: {st.size}px
                    </label>
                    <input
                      type="range"
                      min="50"
                      max="300"
                      value={st.size}
                      onChange={(e) =>
                        updateStampInLibrary(st.id, { size: parseInt(e.target.value) })
                      }
                      className="w-full"
                    />
                  </div>

                  <div>
                    <label className="block text-xs text-gray-700">
                      –ü–æ–≤–æ—Ä–æ—Ç: {st.rotation}¬∞
                    </label>
                    <input
                      type="range"
                      min="0"
                      max="360"
                      value={st.rotation}
                      onChange={(e) =>
                        updateStampInLibrary(st.id, { rotation: parseInt(e.target.value) })
                      }
                      className="w-full"
                    />
                  </div>

                  <button
                    onClick={() => addStampToPage(st.id)}
                    className="w-full bg-blue-500 hover:bg-blue-600 text-white rounded py-1"
                  >
                    –î–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                  </button>
                </div>
              ))}
            </div>
          )}

          {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è PDF */}
          {docType === "pdf" && pdfNumPages > 1 && (
            <div className="space-y-2 text-sm">
              <p className="font-medium">–°—Ç—Ä–∞–Ω–∏—Ü—ã (PDF):</p>
              <div className="flex items-center flex-wrap gap-1">
                {groupStart > 1 && (
                  <button
                    onClick={() => goToPage(groupStart - 1)}
                    className="px-2 py-1 bg-gray-200 rounded"
                  >
                    ¬´
                  </button>
                )}
                {pageNumbers.map((p) => (
                  <button
                    key={p}
                    onClick={() => goToPage(p)}
                    className={`px-2 py-1 rounded ${
                      p === pdfCurrentPage
                        ? "bg-blue-600 text-white"
                        : "bg-gray-200 hover:bg-gray-300"
                    }`}
                  >
                    {p}
                  </button>
                ))}
                {groupEnd < pdfNumPages && (
                  <button
                    onClick={() => goToPage(groupEnd + 1)}
                    className="px-2 py-1 bg-gray-200 rounded"
                  >
                    ¬ª
                  </button>
                )}
              </div>
            </div>
          )}
        </aside>

        {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å */}
        <main className="flex-1 overflow-auto p-3 bg-gray-200">
          {docType === "pdf" ? (
            pdfPages.length > 0 ? (
              pdfPages.map((pg) => {
                const visible = pg.pageNumber === pdfCurrentPage;
                return (
                  <div
                    key={pg.pageNumber}
                    id={`pdf-page-${pg.pageNumber}`}
                    className={`mx-auto relative mb-4 border border-gray-300 ${
                      visible ? "block" : "hidden"
                    }`}
                    style={{ width: pg.width, height: pg.height }}
                  >
                    <img src={pg.dataUrl} alt={`page-${pg.pageNumber}`} />
                    {/* –†–∞–∑–º–µ—â—ë–Ω–Ω—ã–µ –ø–µ—á–∞—Ç–∏ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ */}
                    {placedStamps
                      .filter((pst) => pst.page === pg.pageNumber)
                      .map((pst, i) => {
                        const libStamp = stampsLibrary.find((l) => l.id === pst.libraryId);
                        if (!libStamp) return null;

                        // –ê–∫—Ç–∏–≤–Ω—ã –ª–∏ –º—ã?
                        const isActive = i === activeStampIndex;

                        return (
                          <div
                            key={i}
                            style={{
                              position: "absolute",
                              top: pst.y,
                              left: pst.x,
                              width: pst.size,
                              height: pst.size,
                              transform: `rotate(${pst.rotation}deg)`,
                              opacity: 0.85,
                              mixBlendMode: "multiply",
                              cursor: "grab",
                              // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ, –≤—ã–¥–µ–ª—è–µ–º —Ä–∞–º–∫–æ–π
                              outline: isActive ? "2px dashed #00f" : "none",
                            }}
                            onMouseDown={() => setActiveStampIndex(i)}
                          >
                            <img
                              src={libStamp.src}
                              alt={`stamp-${i}`}
                              style={{ width: "100%", height: "100%" }}
                            />
                            {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
                            <button
                              onClick={(e) => {
                                e.stopPropagation(); // —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å drag
                                removePlacedStamp(i);
                              }}
                              style={{
                                position: "absolute",
                                top: 0,
                                right: 0,
                                backgroundColor: "red",
                                color: "white",
                                border: "none",
                                width: "20px",
                                height: "20px",
                                borderRadius: "50%",
                                cursor: "pointer",
                                fontSize: "12px",
                                lineHeight: "18px",
                              }}
                              title="–£–¥–∞–ª–∏—Ç—å –ø–µ—á–∞—Ç—å"
                            >
                              x
                            </button>
                          </div>
                        );
                      })}
                  </div>
                );
              })
            ) : (
              <p className="text-center">–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF</p>
            )
          ) : docType === "docx" ? (
            docxHtml ? (
              <div
                id="docx-container"
                className="relative mx-auto bg-white p-4 shadow-lg border border-gray-300"
                style={{ width: "80%", minHeight: 600 }}
              >
                <div
                  className="prose max-w-none"
                  dangerouslySetInnerHTML={{ __html: docxHtml }}
                />
                {/* –†–∞–∑–º–µ—â—ë–Ω–Ω—ã–µ –ø–µ—á–∞—Ç–∏ (page=1) */}
                {placedStamps
                  .filter((pst) => pst.page === 1)
                  .map((pst, i) => {
                    const libStamp = stampsLibrary.find((l) => l.id === pst.libraryId);
                    if (!libStamp) return null;
                    const isActive = i === activeStampIndex;

                    return (
                      <div
                        key={i}
                        style={{
                          position: "absolute",
                          top: pst.y,
                          left: pst.x,
                          width: pst.size,
                          height: pst.size,
                          transform: `rotate(${pst.rotation}deg)`,
                          opacity: 0.85,
                          mixBlendMode: "multiply",
                          cursor: "grab",
                          outline: isActive ? "2px dashed #00f" : "none",
                        }}
                        onMouseDown={() => setActiveStampIndex(i)}
                      >
                        <img
                          src={libStamp.src}
                          alt={`stamp-${i}`}
                          style={{ width: "100%", height: "100%" }}
                        />
                        {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            removePlacedStamp(i);
                          }}
                          style={{
                            position: "absolute",
                            top: 0,
                            right: 0,
                            backgroundColor: "red",
                            color: "white",
                            border: "none",
                            width: "20px",
                            height: "20px",
                            borderRadius: "50%",
                            cursor: "pointer",
                            fontSize: "12px",
                            lineHeight: "18px",
                          }}
                          title="–£–¥–∞–ª–∏—Ç—å –ø–µ—á–∞—Ç—å"
                        >
                          x
                        </button>
                      </div>
                    );
                  })}
              </div>
            ) : (
              <p className="text-center">–ó–∞–≥—Ä—É–∑–∏—Ç–µ DOCX</p>
            )
          ) : (
            <p className="text-center">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (PDF / DOCX)</p>
          )}
        </main>
      </div>
    </div>
  );
}
